// 러스트로 빌드하기 위해서는 메모리가 어떻게 작동하는지 알아야 함.
// 수동 메모리 관리의 기본적인 것들에 대해서
// - 스택
// - 힙
// - 포인터
// - 스마트 포인터

// 1. 스택
// - 각각의 함수에 의해 생성된 변수들을 저장하는 프로세스 메모리 영역
// - 각 함수의 메모리 정보를 스택 프레임이라고 함.
// - 여기에 지역 변수들이 저장되고, 모든 함수 호출에 대한 새로운 스택 프레임이 현재 프레임 위에 할당된다.
// - 스택 프레임을 생성한 함수만 여기에 접근할 수 있고, 그것이 함수의 범위를 지정한다.
// - 스택에 있는 모든 변수들의 크기는 컴파일할 때 알려져 있어야 함.
// - 만약 스택에 배열을 저장하고 싶다면, 배열에 얼마나 많은 요소들이 있는지 정확히 명시해야 한다.
// - 함수가 종료되면 스택 프레임도 해제된다.
// - 이것은 메모리 할당에 대해 걱정할 필요가 없고 알아서 관리한다는 뜻이다.
// 메모리 레이아웃
FUNCITON main {
    INTEGER a = 2
    CALL stack_only(a)
}

FUNCTION stack_only(INTEGER b) {
    INTEGER c = 3
}
// main -> 'a=2' -> stack_only -> 'b=2','c=3'

FUNCTION infinite {
    CALL infinite
}
// infinite -> infinite -> infinite -> 
// stack overflow