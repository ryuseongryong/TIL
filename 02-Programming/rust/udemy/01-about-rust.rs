// https://www.rust-lang.org/

// 성능
// 런타임이나 가비지 컬렉터가 없어 성능이 중요한 서비스를
// 임베디드 기기에서 실행되며, 다른 언어와 쉽게 통합할 수 있는
// 놀라운 속도와 메모리 효율성을 제공합니다.

// 신뢰성
// Rust의 풍부한 타입 시스템과 소유권 모델은 메모리 안전성과
// 스레드 안전성을 보장하므로 컴파일 타임에 많은 종류의 버그를
//  제거할 수 있다.

// 생산성
// Rust는 훌륭한 문서, 유용한 오류 메시지가 포함된 친숙한 컴파일러,
// 통합 패키지 관리자 및 빌드 도구, 자동 완성 및 유형 검사 기능을 갖춘
// 스마트 멀티 에디터 지원, 자동 서식 지정 등 최고의 툴을 갖추고 있다.

// "Rust is a modern systems programming language"
// modern language == 선행 언어들의 수많은 문제점들을 해결한 언어
// C, C++과 비교해서 러스트가 더 잘한다
//  - 메모리 안전을 보장하는 저수준 언어이다.
//      - 심각한 보안 이슈 중 70%가 메모리와 안전 문제(크로미움, MS)
//      - 세계 최고의 팀들도 C/C++ 코드를 완전히 안전하게 짜는 것은 불가능함
//      - 메모리를 잘못 사용하고 있으면 컴파일 자체가 불가능할 것임
//      - Java, Go, Python, 다른 모든 언어들은 메모리를 안전하게 사용하기 위해 GC를 사용함.
//      - Rust에는 GC가 없지만 GC를 사용하는 언어들과 동일한 메모리 안전을 보장한다.
//  - No Null, 포인터가 없음
//      - Rust는 존재하지 않는 값을 나타내기 위해 아주 풍부한 타입 시스템을 사용함.
//      - 포인터가 없는 참조나 null 포인터가 예외가 아니라는 것을 뜻함
//  - No Exceptions
//      - Rust에서는 적절하게 오류를 처리하기 위한 타입 시스템을 사용함
//  - Modern package manager
//      - 모든 언어의 또 다른 필요 조건은 훌륭한 패키지 관리자와 빌드 시스템
//      - Rust는 Cargo라는 package manager를 갖고 있음
//      - Cargo는 JS의 MPM(다중처리모듈)과 비슷함
//      - C/C++의 끊임없는 파일 작성 워크 플로우와 버그링커 이슈를 비교해보면
//        러스터 컴파일링은 매니페스트 파일에 의존 라이브러리 목록을 추가하고
//        터미널에서 cargo build를 입력하는 것만큼 어렵다.(?)
//  - No Data Races
//      - Rust가 보장하는 사실 중 최대 장점은 코드가 컴파일되면 더 이상 데이터 레이스가 발생하지 않는다는 것이다.
//      - 이것은 복잡한 비동기 코드 작성을 위한 게임 체인저이다.
